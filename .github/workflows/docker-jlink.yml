# This workflow will :
# - build a Java project with Maven
# - generate a runtime for our docker image using jlink
# - build the docker image
# - publish it to github

name: Java CI with Docker

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  IMAGE_NAME: jlink-img
  PLATFORM: linux

jobs:
  build-jar:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Cache Maven deps
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - run: mkdir artifacts && cp target/*.jar artifacts
      - uses: actions/upload-artifact@v1
        with:
          name: package
          path: artifacts

  # Building our runtime (only if new)
  build-jre:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache runtime
        id: cache-runtime
        uses: actions/cache@v1
        with:
          path: custom-jre
          key: ${{ env.PLATFORM }}-${{ hashFiles('**/jlink-opts.txt') }}
      - name: Set up JDK 17
        if: steps.cache-runtime.outputs.cache-hit != 'true'
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Create custom runtime
        if: steps.cache-runtime.outputs.cache-hit != 'true'
        run: jlink @jlink-opts.txt
        env:
          JAVA_TARGET: ${{ env.JAVA_HOME }}

  push:
    # Ensure build job passes before pushing image.
    needs: [build-jar, build-jre]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download the built jar
        uses: actions/download-artifact@v1
        with:
          name: package
          path: target

      - name: Get runtime
        id: cache-runtime
        uses: actions/cache@v1
        with:
          path: custom-jre
          key: ${{ env.PLATFORM }}-${{ hashFiles('**/jlink-opts.txt') }}

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
